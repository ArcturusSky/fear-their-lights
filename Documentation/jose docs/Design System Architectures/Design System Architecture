Design System Architecture - Fear Their Light
1. Purpose
The purpose of this architecture is to define the interaction between core components of the MVP and ensure scalability and efficiency. It provides a structured overview of how the front-end, back-end, databases, and external services interact to create a seamless multiplayer gaming experience.

2. High-Level Architecture Diagram

3. Data Flow Between Components
User Flow:
    1. User Authentication
        ◦ User interacts with the Svelte Frontend.
        ◦ Request sent to the Express Backend.
        ◦ Passport.js authenticates the user against the MongoDB Database.
        ◦ Token/session is generated and sent back to the frontend.
    2. Multiplayer Game Session
        ◦ Players join a game session.
        ◦ Phaser.js handles real-time game logic on the frontend.
        ◦ Game events (movement, attacks, destruction) are sent via Socket.IO.
        ◦ The Express Backend processes events and updates the game state in MongoDB.
        ◦ Updates are pushed to all connected players in real-time.
    3. Game State and Map Destruction
        ◦ The game map updates dynamically based on destruction events.
        ◦ Backend updates game data in MongoDB.
        ◦ Frontend receives real-time updates via WebSockets.
    4. Game End and Scoreboard
        ◦ The final game state is stored in MongoDB.
        ◦ Scoreboard is updated and displayed to all players.
4. Technology Stack Overview
Frontend (Client-Side):
    • Svelte: Reactive and lightweight UI.
    • Phaser.js: Game development framework.
    • HTML5 Canvas: 2D rendering for game graphics.
    • WebSockets (Socket.IO Client): Handles real-time communication.
Backend (Server-Side):
    • Node.js & Express.js: API and game logic handling.
    • Socket.IO: Real-time synchronization between players.
    • Passport.js: Secure authentication.
    • Game Session Management: Maintains active player states.
Database:
    • MongoDB: Stores user accounts, game states, and scores.
    • Mongoose: Schema-based ODM for MongoDB.
Deployment & Infrastructure:
    • Docker: Containerization for consistent deployment.
    • Heroku/DigitalOcean: Cloud hosting for scalability.
    • CI/CD Pipeline: Automates testing and deployment.
5. Scalability Considerations
    • Microservices Approach: Future expansion can break components (auth, game logic, matchmaking) into separate microservices.
    • Load Balancing: Use Nginx or a cloud-based solution to distribute traffic.
    • Database Optimization: Indexing and sharding for large-scale multiplayer support.
    • Caching: Redis for temporary game state storage.
6. Conclusion
This design system architecture ensures that Fear Their Light is scalable, efficient, and maintainable while providing a seamless multiplayer experience. By leveraging real-time communication, a modular backend, and optimized database interactions, the system will support smooth gameplay even as features expand beyond the MVP.
