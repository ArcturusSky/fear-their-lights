System Components, Classes, and Database Design
Backend Structure
Key Classes
User
    • Attributes: 
        ◦ id: Unique identifier 
        ◦ username: String (unique, required) 
        ◦ email: String (unique, required) 
        ◦ password_hash: String (hashed password, required) 
        ◦ created_at: Timestamp 
        ◦ last_login: Timestamp (optional) 
    • Methods: 
        ◦ register(): Creates a new user 
        ◦ authenticate(): Verifies user credentials 
        ◦ update_password(): Modifies the password 
        ◦ delete_account(): Deletes the user 
GameSession
    • Attributes: 
        ◦ id: Unique identifier 
        ◦ players: List of User IDs 
        ◦ start_time: Timestamp 
        ◦ end_time: Timestamp (nullable, for ongoing sessions) 
        ◦ winner: User ID (nullable until the game ends) 
    • Methods: 
        ◦ start_session(): Initializes a game session 
        ◦ add_player(user_id): Adds a player to the session 
        ◦ remove_player(user_id): Removes a player from the session 
        ◦ end_session(winner_id): Ends the session and declares a winner 
PlayerCharacter
    • Attributes: 
        ◦ id: Unique identifier 
        ◦ user_id: User ID reference 
        ◦ position_x: Float (current X coordinate) 
        ◦ position_y: Float (current Y coordinate) 
        ◦ health: Integer (default: 100) 
        ◦ weapon: String (default: melee weapon) 
    • Methods: 
        ◦ move(direction): Updates position 
        ◦ attack(target_id): Executes an attack 
        ◦ take_damage(amount): Reduces health 
GameMap
    • Attributes: 
        ◦ id: Unique identifier 
        ◦ grid: 2D array defining the terrain 
        ◦ darkness_level: Integer (for light visibility calculations) 
        ◦ destruction_timer: Timer for progressive map destruction 
    • Methods: 
        ◦ update_darkness(): Modifies darkness level dynamically 
        ◦ destroy_area(region_id): Removes an area from the map 
Database Design
Supabase Schema (PostgreSQL-based)
users (User Accounts)
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  last_login TIMESTAMP
);
game_sessions (Active/Completed Matches)
CREATE TABLE game_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  players UUID[] NOT NULL,
  start_time TIMESTAMP DEFAULT NOW(),
  end_time TIMESTAMP,
  winner UUID REFERENCES users(id)
);
player_characters (Player Stats and Attributes)
CREATE TABLE player_characters (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  position_x FLOAT NOT NULL,
  position_y FLOAT NOT NULL,
  health INT DEFAULT 100,
  weapon TEXT DEFAULT 'Melee'
);
game_map (Game World Data)
CREATE TABLE game_map (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  grid JSONB NOT NULL,
  darkness_level INT DEFAULT 5,
  destruction_timer INT DEFAULT 30
);
Frontend UI Components
Main Components
NavigationMenu
    • Displays login/logout, profile, and game settings 
    • Links to game modes and scoreboard 
GameCanvas
    • HTML5 Canvas component rendering the game map and player positions 
    • Manages dynamic updates via WebSockets 
Scoreboard
    • Displays real-time player rankings 
AuthenticationForm
    • Handles user login and registration 
Lobby
    • Displays available game sessions and allows players to join 
Component Interaction Flow
    1. User Login → Auth API verifies credentials and retrieves user data. 
    2. Game Lobby → Fetches available sessions, user joins one. 
    3. Gameplay (GameCanvas) → Renders map, synchronizes player movements via WebSockets. 
    4. Combat System → Player actions (attacks, movements) are processed in real-time. 
    5. Game End → The server updates game_sessions with the winner. 